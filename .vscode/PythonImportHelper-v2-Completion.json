[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "CategoryModel",
        "importPath": "post.models",
        "description": "post.models",
        "isExtraImport": true,
        "detail": "post.models",
        "documentation": {}
    },
    {
        "label": "PostModel",
        "importPath": "post.models",
        "description": "post.models",
        "isExtraImport": true,
        "detail": "post.models",
        "documentation": {}
    },
    {
        "label": "CategoryModel",
        "importPath": "post.models",
        "description": "post.models",
        "isExtraImport": true,
        "detail": "post.models",
        "documentation": {}
    },
    {
        "label": "PostModel",
        "importPath": "post.models",
        "description": "post.models",
        "isExtraImport": true,
        "detail": "post.models",
        "documentation": {}
    },
    {
        "label": "CategoryModel",
        "importPath": "post.models",
        "description": "post.models",
        "isExtraImport": true,
        "detail": "post.models",
        "documentation": {}
    },
    {
        "label": "PostModel",
        "importPath": "post.models",
        "description": "post.models",
        "isExtraImport": true,
        "detail": "post.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "importPath": "post.views",
        "description": "post.views",
        "isExtraImport": true,
        "detail": "post.views",
        "documentation": {}
    },
    {
        "label": "PostViewSet",
        "importPath": "post.views",
        "description": "post.views",
        "isExtraImport": true,
        "detail": "post.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "importPath": "post.serializers",
        "description": "post.serializers",
        "isExtraImport": true,
        "detail": "post.serializers",
        "documentation": {}
    },
    {
        "label": "PostModelSerializer",
        "importPath": "post.serializers",
        "description": "post.serializers",
        "isExtraImport": true,
        "detail": "post.serializers",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "WriterApplication",
        "importPath": "signup_login.models",
        "description": "signup_login.models",
        "isExtraImport": true,
        "detail": "signup_login.models",
        "documentation": {}
    },
    {
        "label": "ModelBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "UserRegistrationView",
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "isExtraImport": true,
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "UserLoginView",
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "isExtraImport": true,
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "isExtraImport": true,
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "BecomeWriterViewSet",
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "isExtraImport": true,
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "AdminApproveWriterViewSet",
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "isExtraImport": true,
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializers",
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "isExtraImport": true,
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "UserLoginSerializers",
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "isExtraImport": true,
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "UserWithRoleSerializer",
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "isExtraImport": true,
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "UserRoleUpdateSerializer",
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "isExtraImport": true,
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "get_token",
        "importPath": "django.middleware.csrf",
        "description": "django.middleware.csrf",
        "isExtraImport": true,
        "detail": "django.middleware.csrf",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "blog_project_backend.asgi",
        "description": "blog_project_backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "blog_project_backend.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    \"corsheaders\",",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    \"corsheaders\",\n    'rest_framework_simplejwt',\n    'rest_framework.authtoken',",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "ROOT_URLCONF = 'blog_project_backend.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "WSGI_APPLICATION = 'blog_project_backend.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    'http://localhost:5173'\n]\nCORS_ALLOW_CREDENTIALS = True\nCSRF_TRUSTED_ORIGINS = [\"http://localhost:5173\", \"http://localhost:8000\"]\nCSRF_COOKIE_SECURE = True\nCSRF_COOKIE_HTTPONLY = False\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nCSRF_TRUSTED_ORIGINS = [\"http://localhost:5173\", \"http://localhost:8000\"]\nCSRF_COOKIE_SECURE = True\nCSRF_COOKIE_HTTPONLY = False\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\"http://localhost:5173\", \"http://localhost:8000\"]\nCSRF_COOKIE_SECURE = True\nCSRF_COOKIE_HTTPONLY = False\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SECURE",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "CSRF_COOKIE_SECURE = True\nCSRF_COOKIE_HTTPONLY = False\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",\n)",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_HTTPONLY",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "CSRF_COOKIE_HTTPONLY = False\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",\n)\nREST_FRAMEWORK = {",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",\n)\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 6,\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\nSIMPLE_JWT = {\n    'AUTH_COOKIE_REFRESH': 'refresh_token',\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'AUTH_COOKIE_REFRESH': 'refresh_token',\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\n    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',\n    'AUTH_COOKIE_SECURE': False,",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'signup_login.backends.EmailBackend',\n    'django.contrib.auth.backends.ModelBackend',\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "blog_project_backend.settings",
        "description": "blog_project_backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "blog_project_backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blog_project_backend.urls",
        "description": "blog_project_backend.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('auth/', include('signup_login.urls')),\n    path('post/', include('post.urls')),\n]",
        "detail": "blog_project_backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "blog_project_backend.wsgi",
        "description": "blog_project_backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "blog_project_backend.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "post.migrations.0001_initial",
        "description": "post.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CategoryModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=60)),",
        "detail": "post.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "post.migrations.0002_alter_categorymodel_name_postmodel",
        "description": "post.migrations.0002_alter_categorymodel_name_postmodel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('post', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='categorymodel',\n            name='name',\n            field=models.CharField(max_length=60, unique=True),",
        "detail": "post.migrations.0002_alter_categorymodel_name_postmodel",
        "documentation": {}
    },
    {
        "label": "PostConfig",
        "kind": 6,
        "importPath": "post.apps",
        "description": "post.apps",
        "peekOfCode": "class PostConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'post'",
        "detail": "post.apps",
        "documentation": {}
    },
    {
        "label": "CategoryModel",
        "kind": 6,
        "importPath": "post.models",
        "description": "post.models",
        "peekOfCode": "class CategoryModel(models.Model):\n    name = models.CharField(max_length=60, unique=True)\n    slug = models.SlugField(unique=True, blank=True)\n    def save(self, *args, **kwargs):\n        # Check if a category with the same name exists\n        if CategoryModel.objects.filter(name=self.name).exists():\n            raise ValidationError(f\"A category with the name '{\n                                  self.name}' already exists.\")\n        if not self.slug:\n            self.slug = slugify(self.name)",
        "detail": "post.models",
        "documentation": {}
    },
    {
        "label": "PostModel",
        "kind": 6,
        "importPath": "post.models",
        "description": "post.models",
        "peekOfCode": "class PostModel(models.Model):\n    image = models.URLField()\n    user = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name='posts')\n    title = models.CharField(max_length=300)\n    description = models.TextField()\n    category = models.ManyToManyField(CategoryModel, related_name='posts')\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.title",
        "detail": "post.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "post.serializers",
        "description": "post.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User  # Replace with the actual User model if it's custom\n        fields = ['id', 'username', 'email', 'first_name',\n                  'last_name']  # Include other fields as needed\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CategoryModel\n        fields = ['id', 'name', 'slug']\n    def validate_name(self, value):",
        "detail": "post.serializers",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "post.serializers",
        "description": "post.serializers",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CategoryModel\n        fields = ['id', 'name', 'slug']\n    def validate_name(self, value):\n        if CategoryModel.objects.filter(name=value).exists():\n            raise serializers.ValidationError(\n                f\"A category with the name '{value}' already exists.\")\n        return value\nclass PostModelSerializer(serializers.ModelSerializer):",
        "detail": "post.serializers",
        "documentation": {}
    },
    {
        "label": "PostModelSerializer",
        "kind": 6,
        "importPath": "post.serializers",
        "description": "post.serializers",
        "peekOfCode": "class PostModelSerializer(serializers.ModelSerializer):\n    category = CategorySerializer(many=True, read_only=True)\n    category_ids = serializers.PrimaryKeyRelatedField(\n        queryset=CategoryModel.objects.all(),\n        many=True,\n        write_only=True,\n        source='category'\n    )\n    user = UserSerializer(read_only=True)\n    class Meta:",
        "detail": "post.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "post.urls",
        "description": "post.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'category', CategoryViewSet, basename='category')\nrouter.register(r'post', PostViewSet, basename='post')\nurlpatterns = router.urls",
        "detail": "post.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "post.urls",
        "description": "post.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "post.urls",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "post.views",
        "description": "post.views",
        "peekOfCode": "class CategoryViewSet(viewsets.ViewSet):\n    def list(self, request):\n        categories = CategoryModel.objects.all()\n        serializer = CategorySerializer(categories, many=True)\n        return Response(serializer.data)\n    def create(self, request):\n        serializer = CategorySerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(",
        "detail": "post.views",
        "documentation": {}
    },
    {
        "label": "PostViewSet",
        "kind": 6,
        "importPath": "post.views",
        "description": "post.views",
        "peekOfCode": "class PostViewSet(viewsets.ModelViewSet):\n    queryset = PostModel.objects.all()\n    serializer_class = PostModelSerializer\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        # Check for category_slug and filter by the slug field\n        category_slug = self.request.query_params.get('category_slug')\n        if category_slug:\n            queryset = queryset.filter(category__slug=category_slug)\n        user_id = self.request.query_params.get('user')",
        "detail": "post.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "signup_login.migrations.0001_initial",
        "description": "signup_login.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserProfile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "signup_login.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "signup_login.migrations.0002_delete_userprofile",
        "description": "signup_login.migrations.0002_delete_userprofile",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('signup_login', '0001_initial'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='UserProfile',\n        ),\n    ]",
        "detail": "signup_login.migrations.0002_delete_userprofile",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "signup_login.migrations.0003_initial",
        "description": "signup_login.migrations.0003_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('signup_login', '0002_delete_userprofile'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[",
        "detail": "signup_login.migrations.0003_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "signup_login.migrations.0004_delete_user",
        "description": "signup_login.migrations.0004_delete_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('signup_login', '0003_initial'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='User',\n        ),\n    ]",
        "detail": "signup_login.migrations.0004_delete_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "signup_login.migrations.0005_initial",
        "description": "signup_login.migrations.0005_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('signup_login', '0004_delete_user'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[",
        "detail": "signup_login.migrations.0005_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "signup_login.migrations.0006_delete_user",
        "description": "signup_login.migrations.0006_delete_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('signup_login', '0005_initial'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='User',\n        ),\n    ]",
        "detail": "signup_login.migrations.0006_delete_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "signup_login.migrations.0007_initial",
        "description": "signup_login.migrations.0007_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('signup_login', '0006_delete_user'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Profile',\n            fields=[",
        "detail": "signup_login.migrations.0007_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "signup_login.migrations.0008_delete_profile",
        "description": "signup_login.migrations.0008_delete_profile",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('signup_login', '0007_initial'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Profile',\n        ),\n    ]",
        "detail": "signup_login.migrations.0008_delete_profile",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "signup_login.migrations.0009_initial",
        "description": "signup_login.migrations.0009_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('signup_login', '0008_delete_profile'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='WriterApplication',\n            fields=[",
        "detail": "signup_login.migrations.0009_initial",
        "documentation": {}
    },
    {
        "label": "EmailBackend",
        "kind": 6,
        "importPath": "signup_login.backends",
        "description": "signup_login.backends",
        "peekOfCode": "class EmailBackend(ModelBackend):\n    def authenticate(self, request, email=None, password=None, **kwargs):\n        UserModel = get_user_model()\n        try:\n            user = UserModel.objects.get(email=email)\n            if user.check_password(password):\n                return user\n        except UserModel.DoesNotExist:\n            return None",
        "detail": "signup_login.backends",
        "documentation": {}
    },
    {
        "label": "WriterApplication",
        "kind": 6,
        "importPath": "signup_login.models",
        "description": "signup_login.models",
        "peekOfCode": "class WriterApplication(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    first_name = models.CharField(max_length=255)\n    last_name = models.CharField(max_length=255)\n    email = models.EmailField()\n    is_approved = models.BooleanField(default=False)\n    agreed_to_terms = models.BooleanField(default=False)\n    applied_on = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.first_name} {self.last_name} ({self.user.username})\"",
        "detail": "signup_login.models",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializers",
        "kind": 6,
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "peekOfCode": "class UserRegistrationSerializers(serializers.ModelSerializer):\n    confirm_password = serializers.CharField(required=True)\n    class Meta:\n        model = User\n        fields = ['username', 'first_name', 'last_name',\n                  'email', 'password', 'confirm_password']\n    def save(self):\n        username = self.validated_data['username']\n        first_name = self.validated_data['first_name']\n        last_name = self.validated_data['last_name']",
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "UserLoginSerializers",
        "kind": 6,
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "peekOfCode": "class UserLoginSerializers(serializers.ModelSerializer):\n    email = serializers.EmailField(required=True)\n    password = serializers.CharField(required=True)\n    class Meta:\n        model = User\n        fields = ['email', 'password']\nclass UserRoleUpdateSerializer(serializers.ModelSerializer):\n    role = serializers.ChoiceField(choices=['user', 'student', 'writer'])\n    class Meta:\n        model = User",
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "UserRoleUpdateSerializer",
        "kind": 6,
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "peekOfCode": "class UserRoleUpdateSerializer(serializers.ModelSerializer):\n    role = serializers.ChoiceField(choices=['user', 'student', 'writer'])\n    class Meta:\n        model = User\n        fields = ['role']\n    def update(self, instance, validated_data):\n        instance.groups.clear()\n        new_role = validated_data['role']\n        group, created = Group.objects.get_or_create(name=new_role)\n        instance.groups.add(group)",
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "UserWithRoleSerializer",
        "kind": 6,
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "peekOfCode": "class UserWithRoleSerializer(serializers.ModelSerializer):\n    roles = serializers.SerializerMethodField()\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email',\n                  'first_name', 'last_name', 'roles']\n    def get_roles(self, obj):\n        return [group.name for group in obj.groups.all()]\nclass WriterApplicationSerializer(serializers.ModelSerializer):\n    user = serializers.ReadOnlyField(source='user.username')",
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "WriterApplicationSerializer",
        "kind": 6,
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "peekOfCode": "class WriterApplicationSerializer(serializers.ModelSerializer):\n    user = serializers.ReadOnlyField(source='user.username')\n    class Meta:\n        model = WriterApplication\n        fields = ['id', 'user', 'first_name', 'last_name',\n                  'email', 'is_approved', 'agreed_to_terms']\n    def validate(self, data):\n        if WriterApplication.objects.filter(user=self.context['request'].user).exists():\n            raise serializers.ValidationError(\n                \"You have already applied to become a writer.\")",
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "WriterApplicationStatusSerializer",
        "kind": 6,
        "importPath": "signup_login.serializers",
        "description": "signup_login.serializers",
        "peekOfCode": "class WriterApplicationStatusSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = WriterApplication\n        fields = ['is_approved']\n    def update(self, instance, validated_data):\n        instance.is_approved = validated_data.get(\n            'is_approved', instance.is_approved)\n        instance.save()\n        return instance",
        "detail": "signup_login.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "signup_login.urls",
        "description": "signup_login.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'signup', UserRegistrationView, basename='signup')\nrouter.register(r'login', UserLoginView, basename='login')\n# router.register(r'users', UserViewSet, basename='users')\nrouter.register(r'user', UserViewSet, basename='user')\nrouter.register(r'apply-to-become-writer',\n                BecomeWriterViewSet, basename='become_writer')\nrouter.register(r'admin/approve-writer',\n                AdminApproveWriterViewSet, basename='approve_writer')\nurlpatterns = router.urls + [",
        "detail": "signup_login.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "signup_login.urls",
        "description": "signup_login.urls",
        "peekOfCode": "urlpatterns = router.urls + [\n    path('refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]",
        "detail": "signup_login.urls",
        "documentation": {}
    },
    {
        "label": "UserRegistrationView",
        "kind": 6,
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "peekOfCode": "class UserRegistrationView(viewsets.ViewSet):\n    def create(self, request):\n        serializer = UserRegistrationSerializers(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response({'message': 'User Registered Successfully'}, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\nclass UserLoginView(viewsets.ViewSet):\n    def create(self, request):\n        serializer = UserLoginSerializers(data=request.data)",
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "UserLoginView",
        "kind": 6,
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "peekOfCode": "class UserLoginView(viewsets.ViewSet):\n    def create(self, request):\n        serializer = UserLoginSerializers(data=request.data)\n        if serializer.is_valid():\n            email = serializer.validated_data['email']\n            password = serializer.validated_data['password']\n            user = authenticate(request, email=email, password=password)\n            if user is not None:\n                refresh = RefreshToken.for_user(user)\n                user.last_login = now()",
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "UserLogoutViewSet",
        "kind": 6,
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "peekOfCode": "class UserLogoutViewSet(viewsets.ViewSet):\n    def create(self, request):\n        logout(request)\n        response = Response(\n            {'message': 'User logged out successfully'}, status=status.HTTP_205_RESET_CONTENT)\n        response.delete_cookie('refresh')\n        return response\n# class UserViewSet(viewsets.ViewSet):\n#     def list(self, request):\n#         users = User.objects.all()",
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "peekOfCode": "class UserViewSet(viewsets.ViewSet):\n    @action(detail=True, methods=['put'], url_path='update-role')\n    def update_role(self, request, pk=None):\n        try:\n            user = User.objects.get(pk=pk)\n        except User.DoesNotExist:\n            return Response({\"error\": \"User not found.\"}, status=status.HTTP_404_NOT_FOUND)\n        serializer = UserRoleUpdateSerializer(user, data=request.data)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "BecomeWriterViewSet",
        "kind": 6,
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "peekOfCode": "class BecomeWriterViewSet(viewsets.ModelViewSet):\n    queryset = WriterApplication.objects.all()\n    serializer_class = WriterApplicationSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        search_query = self.request.query_params.get('search', None)\n        # Apply filters if search query is provided\n        if search_query:\n            queryset = queryset.filter(",
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "AdminApproveWriterViewSet",
        "kind": 6,
        "importPath": "signup_login.views",
        "description": "signup_login.views",
        "peekOfCode": "class AdminApproveWriterViewSet(viewsets.ViewSet):\n    permission_classes = [IsAuthenticated]\n    @action(detail=True, methods=['patch'], url_path='approve')\n    def approve(self, request, pk=None):\n        if not request.user.is_superuser:\n            return Response({\"detail\": \"Only admin can approve applications.\"}, status=status.HTTP_403_FORBIDDEN)\n        try:\n            writer_application = WriterApplication.objects.get(id=pk)\n        except WriterApplication.DoesNotExist:\n            return Response({\"detail\": \"Writer application not found.\"}, status=status.HTTP_404_NOT_FOUND)",
        "detail": "signup_login.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project_backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]